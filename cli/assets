#!/usr/bin/env php
<?php
if (is_file(__DIR__ . '/../vendor/autoload.php')) {
    require __DIR__ . '/../vendor/autoload.php';
} else if (is_file(__DIR__ . '/../../autoload.php')) {
    require __DIR__ . '/../../autoload.php';
}

function init($input)
{
    $configFilePath = $input->getArgument('config');
    if ($configFilePath === null) {
        $env = getenv('ASSETS_ENV');
        if (empty($env)) {
            $env = 'development';
        }
        $configFilePath =  __DIR__ . "/../configs/{$env}/assets.php";
    }

    \Assets\Config::init($configFilePath);
}


$commander = new Commander();
$commander->name('assets')
    ->version('0.1.0')
    ->command(
        array(
            'name' => 'compile',
            'description' => 'Compile a asset file to JavaScript or Css file.',
            'arguments' => array(
                array(
                    'name' => 'path',
                    'description' => 'Path of the asset file.',
                    'mode' => Commander::ARGUMENT_REQUIRED
                ),
                array(
                    'name' => 'config',
                    'description' => 'Path of the config file.'
                )
            ),
            'callback' => function($input, $output) {
                $srcFile = new SplFileInfo($input->getArgument('path'));
                if (file_exists($srcFile)) {
                    $type = $srcFile->getExtension();
                    if (in_array($type, array('css', 'scss', 'less', 'coffee'))) {
                        init($input);
                        $srcFile = $srcFile->getRealPath();
                        $class = '\\Assets\\Compiler\\' . ucfirst($type);
                        $distFile = $class::compile($srcFile);
                        if ($distFile === false) {
                            $output->writeln("<error>Can't compile file:{$srcFile}</error>");
                        } else {
                            $output->writeln("<info>Create file to</info>:{$distFile}");
                        }
                    }
                }
            }
        )
    )
    ->run();