#!/usr/bin/env php
<?php
if (is_file(__DIR__ . '/../vendor/autoload.php')) {
    require __DIR__ . '/../vendor/autoload.php';
} else if (is_file(__DIR__ . '/../../../autoload.php')) {
    require __DIR__ . '/../../../autoload.php';
}

use Assets\Config;
use Assets\Helper;
use Assets\Uglify\Js;
use Assets\Uglify\Css;

function init($input)
{
    $configFilePath = $input->getArgument('config');
    if ($configFilePath === null) {
        $env = getenv('ASSETS_ENV');
        if (empty($env)) {
            $env = 'development';
        }

        $configFilePath = getcwd() . "/configs/{$env}/assets.php";
    }

    Config::init($configFilePath);
}

function clean()
{
    $serverRoot = Config::getServerRootPath();
    Helper::removePath($serverRoot . DIRECTORY_SEPARATOR . 'uglified');
    Helper::removePath($serverRoot . DIRECTORY_SEPARATOR . '.assetsrc');
    Helper::removePath($serverRoot . DIRECTORY_SEPARATOR . 'tmp' . DIRECTORY_SEPARATOR . 'assets');
    Helper::removePath($serverRoot . DIRECTORY_SEPARATOR . 'tmp' . DIRECTORY_SEPARATOR . 'assets');
}

$commander = new Commander();
$commander->name('assets')
    ->version('0.1.0')
    ->command(
        array(
            'name' => 'clean',
            'description' => 'Remove old compiled assets',
            'arguments' => array(
                array(
                    'name' => 'config',
                    'description' => 'Path of the config file'
                )
            ),
            'callback' => function($input, $output) {
                init($input);
                clean();
            }
        )
    )
    ->command(
        array(
            'name' => 'precompile',
            'description' => 'Compile all the assets named in $config["precompile"]["files"]',
            'arguments' => array(
                array(
                    'name' => 'config',
                    'description' => 'Path of the config file'
                )
            ),
            'callback' => function($input, $output) {
                init($input);
                clean();
                $compiledFiles = array();
                $precompileFiles = Config::getPrecompile();
                $serverRootPath = Config::getServerRootPath();
                foreach ($precompileFiles as $precompileFile) {
                    $precompileFile = ltrim($precompileFile, DIRECTORY_SEPARATOR);
                    $file = new SplFileInfo($precompileFile);
                    $extName = strtolower($file->getExtension());
                    if (empty($extName) || in_array($extName, array('js', 'css')) === false) {
                        continue;
                    }

                    if ($extName === 'js') {
                        $distFile = Js::uglify($precompileFile);
                    } else {
                        $distFile = Css::uglify($precompileFile);
                    }

                    if ($distFile === false) {
                        $output->writeln("<error>Can't compile file : {$precompileFile}</error>");
                    } else {
                        $compiledFiles[$precompileFile] = $distFile;
                        $output->writeln('<info>Create file</info> : ' . $serverRootPath . $distFile);
                    }
                }

                if (!empty($compiledFiles)) {
                    file_put_contents(
                        $serverRootPath . DIRECTORY_SEPARATOR . '.assetsrc',
                        serialize($compiledFiles)
                    );
                }
            }
        )
    )
    ->run();